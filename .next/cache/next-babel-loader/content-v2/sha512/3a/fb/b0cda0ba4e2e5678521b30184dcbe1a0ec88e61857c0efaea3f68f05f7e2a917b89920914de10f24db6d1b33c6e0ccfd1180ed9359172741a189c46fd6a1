{"ast":null,"code":"import _defineProperty from \"/Users/aidev/Documents/Projects/Swizce/swizce-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _toConsumableArray from \"/Users/aidev/Documents/Projects/Swizce/swizce-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"/Users/aidev/Documents/Projects/Swizce/swizce-frontend/src/components/Scream/uploads/Uploads.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useCallback, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nexport function MultiFileUploadField() {\n  _s();\n\n  var _useState = useState([]),\n      files = _useState[0],\n      setFiles = _useState[1];\n\n  var onDrop = useCallback(function (accFiles, rejFiles) {\n    var mappedAcc = accFiles.map(function (file) {\n      return {\n        file: file,\n        errors: []\n      };\n    });\n    setFiles(function (curr) {\n      return [].concat(_toConsumableArray(curr), _toConsumableArray(mappedAcc), _toConsumableArray(rejFiles));\n    });\n  }, []);\n\n  var _useDropzone = useDropzone({\n    onDrop: onDrop\n  }),\n      getRootProps = _useDropzone.getRootProps,\n      getInputProps = _useDropzone.getInputProps;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, getRootProps()), {}, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", _objectSpread({}, getInputProps()), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drag 'n' drop some files here, or click to select files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this), JSON.stringify(files)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MultiFileUploadField, \"DqA2Wglu5CaOY1Jc/iqdl2dkW8k=\", false, function () {\n  return [useDropzone];\n});\n\n_c = MultiFileUploadField;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiFileUploadField\");","map":{"version":3,"sources":["/Users/aidev/Documents/Projects/Swizce/swizce-frontend/src/components/Scream/uploads/Uploads.tsx"],"names":["useCallback","useState","useDropzone","MultiFileUploadField","files","setFiles","onDrop","accFiles","rejFiles","mappedAcc","map","file","errors","curr","getRootProps","getInputProps","JSON","stringify"],"mappings":";;;;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAAmCC,WAAnC,QAAsD,gBAAtD;AAQA,OAAO,SAASC,oBAAT,GAAgC;AAAA;;AAAA,kBACXF,QAAQ,CAAC,EAAD,CADG;AAAA,MAC9BG,KAD8B;AAAA,MACvBC,QADuB;;AAErC,MAAMC,MAAM,GAAGN,WAAW,CAAC,UAACO,QAAD,EAAmBC,QAAnB,EAAiD;AAC1E,QAAMC,SAAS,GAAGF,QAAQ,CAACG,GAAT,CAAa,UAAAC,IAAI;AAAA,aAAK;AAAEA,QAAAA,IAAI,EAAJA,IAAF;AAAQC,QAAAA,MAAM,EAAE;AAAhB,OAAL;AAAA,KAAjB,CAAlB;AAEAP,IAAAA,QAAQ,CAAC,UAAAQ,IAAI;AAAA,0CAAQA,IAAR,sBAAiBJ,SAAjB,sBAA+BD,QAA/B;AAAA,KAAL,CAAR;AACD,GAJyB,EAIvB,EAJuB,CAA1B;;AAFqC,qBAOCN,WAAW,CAAC;AAACI,IAAAA,MAAM,EAANA;AAAD,GAAD,CAPZ;AAAA,MAO9BQ,YAP8B,gBAO9BA,YAP8B;AAAA,MAOhBC,aAPgB,gBAOhBA,aAPgB;;AASrC,sBACE,+CAASD,YAAY,EAArB;AAAA,4BACE,mCAAWC,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA,YADF,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGKC,IAAI,CAACC,SAAL,CAAeb,KAAf,CAHL;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAhBeD,oB;UAOwBD,W;;;KAPxBC,oB","sourcesContent":["import { useCallback, useState } from \"react\"\nimport { FileError, FileRejection, useDropzone } from \"react-dropzone\"\n\nexport interface UploadableFile {\n  file: File;\n  errors: FileError[];\n}\n\n\nexport function MultiFileUploadField() {\n  const [files, setFiles] = useState([]);\n  const onDrop = useCallback((accFiles: File[], rejFiles: FileRejection[]) => {\n    const mappedAcc = accFiles.map(file => ({ file, errors: []}));\n\n    setFiles(curr => [...curr, ...mappedAcc, ...rejFiles])\n  }, [])\n  const {getRootProps, getInputProps} = useDropzone({onDrop})\n\n  return (\n    <div {...getRootProps()}>\n      <input {...getInputProps()} />\n        <p>Drag 'n' drop some files here, or click to select files</p>\n        {JSON.stringify(files)}\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}
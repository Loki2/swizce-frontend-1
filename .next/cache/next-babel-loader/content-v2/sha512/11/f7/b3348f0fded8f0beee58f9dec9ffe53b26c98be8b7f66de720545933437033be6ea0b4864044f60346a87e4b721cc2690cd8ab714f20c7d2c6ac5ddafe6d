{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aidev/Documents/Projects/Swizce/swizce-frontend/src/components/Scream/uploads/Uploads.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useCallback, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nexport function MultiFileUploadField() {\n  const {\n    0: files,\n    1: setFiles\n  } = useState([]);\n  const onDrop = useCallback((accFiles, rejFiles) => {\n    const mappedAcc = accFiles.map(file => ({\n      file,\n      errors: []\n    }));\n    setFiles(curr => [...curr, ...mappedAcc, ...rejFiles]);\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, getRootProps()), {}, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", _objectSpread({}, getInputProps()), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drag 'n' drop some files here, or click to select files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this), JSON.stringify(files)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/aidev/Documents/Projects/Swizce/swizce-frontend/src/components/Scream/uploads/Uploads.tsx"],"names":["useCallback","useState","useDropzone","MultiFileUploadField","files","setFiles","onDrop","accFiles","rejFiles","mappedAcc","map","file","errors","curr","getRootProps","getInputProps","JSON","stringify"],"mappings":";;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAAmCC,WAAnC,QAAsD,gBAAtD;AAQA,OAAO,SAASC,oBAAT,GAAgC;AACrC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMK,MAAM,GAAGN,WAAW,CAAC,CAACO,QAAD,EAAmBC,QAAnB,KAAiD;AAC1E,UAAMC,SAAS,GAAGF,QAAQ,CAACG,GAAT,CAAaC,IAAI,KAAK;AAAEA,MAAAA,IAAF;AAAQC,MAAAA,MAAM,EAAE;AAAhB,KAAL,CAAjB,CAAlB;AAEAP,IAAAA,QAAQ,CAACQ,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAU,GAAGJ,SAAb,EAAwB,GAAGD,QAA3B,CAAT,CAAR;AACD,GAJyB,EAIvB,EAJuB,CAA1B;AAKA,QAAM;AAACM,IAAAA,YAAD;AAAeC,IAAAA;AAAf,MAAgCb,WAAW,CAAC;AAACI,IAAAA;AAAD,GAAD,CAAjD;AAEA,sBACE,+CAASQ,YAAY,EAArB;AAAA,4BACE,mCAAWC,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA,YADF,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGKC,IAAI,CAACC,SAAL,CAAeb,KAAf,CAHL;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD","sourcesContent":["import { useCallback, useState } from \"react\"\nimport { FileError, FileRejection, useDropzone } from \"react-dropzone\"\n\nexport interface UploadableFile {\n  file: File;\n  errors: FileError[];\n}\n\n\nexport function MultiFileUploadField() {\n  const [files, setFiles] = useState([]);\n  const onDrop = useCallback((accFiles: File[], rejFiles: FileRejection[]) => {\n    const mappedAcc = accFiles.map(file => ({ file, errors: []}));\n\n    setFiles(curr => [...curr, ...mappedAcc, ...rejFiles])\n  }, [])\n  const {getRootProps, getInputProps} = useDropzone({onDrop})\n\n  return (\n    <div {...getRootProps()}>\n      <input {...getInputProps()} />\n        <p>Drag 'n' drop some files here, or click to select files</p>\n        {JSON.stringify(files)}\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}
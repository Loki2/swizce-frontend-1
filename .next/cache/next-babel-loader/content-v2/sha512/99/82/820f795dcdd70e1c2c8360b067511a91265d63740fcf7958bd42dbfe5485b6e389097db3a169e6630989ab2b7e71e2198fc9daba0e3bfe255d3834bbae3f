{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aidev/Documents/Projects/Swizce/swizce-frontend/src/components/Scream/uploads/UploadItem.tsx\";\nimport React, { useEffect } from \"react\";\nexport function UploadItems({\n  file\n}) {\n  useEffect(() => {\n    function upload() {// const url = await UploadFile(file)\n    }\n\n    upload();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list__upload__item\",\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"\",\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 10\n  }, this);\n}\n\nfunction UploadFile(file, onProgress) {\n  const url = 'https://api.cloudinary.com/v1_1/swizce/image/upload';\n  const key = '';\n  return new Promise((res, rej) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', url);\n\n    xhr.onload = () => {\n      const resp = JSON.parse(xhr.responseText);\n      res('url - where cloudinary saved file');\n    };\n\n    xhr.onerror = evt => rej(evt);\n\n    xhr.upload.onprogress = event => {\n      if (event.lengthComputable) {\n        const percentage = event.loaded / event.total * 100;\n        onProgress(Math.round(percentage));\n      }\n    };\n\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('keys', key);\n    xhr.send(formData);\n  });\n}","map":{"version":3,"sources":["/Users/aidev/Documents/Projects/Swizce/swizce-frontend/src/components/Scream/uploads/UploadItem.tsx"],"names":["React","useEffect","UploadItems","file","upload","UploadFile","onProgress","url","key","Promise","res","rej","xhr","XMLHttpRequest","open","onload","resp","JSON","parse","responseText","onerror","evt","onprogress","event","lengthComputable","percentage","loaded","total","Math","round","formData","FormData","append","send"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAOA,OAAO,SAASC,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAgD;AACrDF,EAAAA,SAAS,CAAC,MAAM;AACd,aAASG,MAAT,GAAkB,CAChB;AACD;;AAEDA,IAAAA,MAAM;AACP,GANQ,EAMN,EANM,CAAT;AAOA,sBAAO;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA,2BACL;AAAK,MAAA,GAAG,EAAC,EAAT;AAAY,MAAA,GAAG,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA;AADK;AAAA;AAAA;AAAA;AAAA,UAAP;AAGD;;AAED,SAASC,UAAT,CAAoBF,IAApB,EAAgCG,UAAhC,EAAyE;AACvE,QAAMC,GAAG,GAAG,qDAAZ;AACA,QAAMC,GAAG,GAAG,EAAZ;AACA,SAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/B,UAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ;AACAD,IAAAA,GAAG,CAACE,IAAJ,CAAS,MAAT,EAAiBP,GAAjB;;AAEAK,IAAAA,GAAG,CAACG,MAAJ,GAAa,MAAM;AACjB,YAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWN,GAAG,CAACO,YAAf,CAAb;AACAT,MAAAA,GAAG,CAAC,mCAAD,CAAH;AACD,KAHD;;AAKAE,IAAAA,GAAG,CAACQ,OAAJ,GAAeC,GAAD,IAASV,GAAG,CAACU,GAAD,CAA1B;;AAEAT,IAAAA,GAAG,CAACR,MAAJ,CAAWkB,UAAX,GAAyBC,KAAD,IAAW;AACjC,UAAGA,KAAK,CAACC,gBAAT,EAA2B;AACzB,cAAMC,UAAU,GAAIF,KAAK,CAACG,MAAN,GAAaH,KAAK,CAACI,KAApB,GAA6B,GAAhD;AACArB,QAAAA,UAAU,CAACsB,IAAI,CAACC,KAAL,CAAWJ,UAAX,CAAD,CAAV;AACD;AACF,KALD;;AAOA,UAAMK,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AAEAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB7B,IAAxB;AACA2B,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBxB,GAAxB;AAGAI,IAAAA,GAAG,CAACqB,IAAJ,CAASH,QAAT;AACD,GAzBM,CAAP;AA0BD","sourcesContent":["import React, { useEffect } from \"react\"\n\nexport interface UploadItemsProps {\n  file: File; //[]\n}\n\n\nexport function UploadItems({ file }: UploadItemsProps){\n  useEffect(() => {\n    function upload() {\n      // const url = await UploadFile(file)\n    }\n\n    upload();\n  }, []);\n  return <div className=\"list__upload__item\">\n    <img src=\"\" alt=\"\" />\n  </div>\n}\n\nfunction UploadFile(file: File, onProgress: (percentage: number) => void){\n  const url = 'https://api.cloudinary.com/v1_1/swizce/image/upload';\n  const key = ''\n  return new Promise((res, rej) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', url);\n\n    xhr.onload = () => {\n      const resp = JSON.parse(xhr.responseText);\n      res('url - where cloudinary saved file');\n    }\n\n    xhr.onerror = (evt) => rej(evt);\n\n    xhr.upload.onprogress = (event) => {\n      if(event.lengthComputable) {\n        const percentage = (event.loaded/event.total) * 100;\n        onProgress(Math.round(percentage))\n      }\n    }\n\n    const formData = new FormData();\n\n    formData.append('file', file);\n    formData.append('keys', key);\n\n\n    xhr.send(formData)\n  })\n}\n"]},"metadata":{},"sourceType":"module"}